name: "Run SAST, Build and push supermario image, scan image. Update deployment and version files"

on:
  push:
    branches:
      - main

env:
  VERSION: $(( $(cat version.txt) + 1 ))


jobs:

  sonarqube_sast_scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0    # Shallow clones should be disabled for better analysis relevance

      - name: SonarQube scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines.  This would typically be used to fail a deployment
      # - name: SonarQube Quality Gate Check
      #   uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build_push_supermario_docker_image:
    runs-on: ubuntu-latest
    needs: sonarqube_sast_scan

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub"
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and Push Docker image
        run: |  # docker.build -t '' {DockerHub URL}/{DockerHub Username}/{DockerHub Repo}:{Static Tag} {directory where dockerfile is placed}
          docker build -t docker.io/svenmarley/supermariogitopsproject:${{ env.VERSION }} .
          docker push docker.io/svenmarley/supermariogitopsproject:${{ env.VERSION }}

  run_container_image_scan_on_supermario_docker_image:
    runs-on: ubuntu-latest
    needs: build_push_supermario_docker_image

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub"
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Get Docker Image from Docker Hub
        run: |  # docker.build -t '' {DockerHub URL}/{DockerHub Username}/{DockerHub Repo}:{Static Tag} {directory where dockerfile is placed}
          docker pull docker.io/svenmarley/supermariogitopsproject:${{ env.VERSION }}
          docker save -o supermariolatestdockerimage.tar docker.io/svenmarley/supermariogitopsproject:${{ env.VERSION }}

      - name: Run Trivy vulnerability scanner on tarball
        uses: aquasecurity/trivy-action@master
        with:
          input: ${{ github.workspace }}/supermariolatestdockerimage.tar      # note: the github.workspace is not in the video
          exit-code: '0'        # if 0, then build passes
          severity: 'CRITICAL,HIGH'

  update_k8s_yaml_version_file_with_latest_image_tag:
    runs-on: ubuntu-latest
    needs: run_container_image_scan_on_supermario_docker_image

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Git Config
        run: |
          git config --global user.email "${{ secrets.GIT_EMAIL }}"
          git config --gllobal user.name "${{ secrets.GIT_USERNAME }}"

      - name: Update Deployment YAML
        run: |
          git pull
          sed -i "s|image: svenmarley/supermariogitopsproject:.*|image: svenmarley/supermariogitopsproject:${{ env.VERSION }}|" deployment.yaml
          echo ${{ env.VERSION }} > version.txt
          CURRENT_VERSION=$(cat version.txt)
          git add deployment.yml version.txt
          git commit -m "Updated deployment yaml and version text file with supermario image tag to ${CURRENT_VERSION}."
          git push
 
